import { ethers, network } from 'hardhat'
import { MyNFT, MyNFT__factory } from '../typechain-types'
import { expect, should } from 'chai'
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers'

describe('MyNFT', function () {
    let MyNFT: MyNFT
    let MyNFT__factory: MyNFT__factory

    let owner: SignerWithAddress
    let addr1: SignerWithAddress
    let addr2: SignerWithAddress
    let addr3: SignerWithAddress
    let addrs: SignerWithAddress[]

    this.beforeEach(async () => {
        ;[owner, addr1, addr2, addr3, ...addrs] = await ethers.getSigners()

        MyNFT__factory = await ethers.getContractFactory('MyNFT')
        // deployed with max supply of 1
        MyNFT = await MyNFT__factory.deploy(1)
    })

    describe('Contract', () => {
        it('Should be ownable and the default owner should be the deployer address', async () => {
            // the address 0 is the contract deployer
            expect(owner.address).to.be.equal(await MyNFT.owner())
        })

        it('Each token ID should have a max supply of 1', async () => {
            await MyNFT.mint('https://api.example.com/tokens/{id}')
            expect(await MyNFT.balanceOf(owner.address, 0)).to.equal(1)
            await MyNFT.mint('https://api.example.com/tokens/{id}')
            expect(await MyNFT.balanceOf(owner.address, 1)).to.equal(1)
        })

        it("Token ID's should be autogenerated and incremental", async () => {
            await MyNFT.mint('https://api.example.com/tokens/{id}')
            expect(await MyNFT.nftIdCounter()).to.equal(1)
            await MyNFT.mint('https://api.example.com/tokens/{id}')
            expect(await MyNFT.nftIdCounter()).to.equal(2)
            await MyNFT.mint('https://api.example.com/tokens/{id}')
            expect(await MyNFT.nftIdCounter()).to.equal(3)
            await MyNFT.mint('https://api.example.com/tokens/{id}')
            expect(await MyNFT.nftIdCounter()).to.equal(4)
        })

        it('Should mint tokens with string uri as a parameter', async () => {
            await MyNFT.mint('https://api.example.com/tokens/{id}')
            expect(await MyNFT.uri(0)).to.equal(
                'https://api.example.com/tokens/{id}'
            )
            await MyNFT.mint('https://api.awesomewebsite.com/users/tokens/{id}')
            expect(await MyNFT.uri(1)).to.equal(
                'https://api.awesomewebsite.com/users/tokens/{id}'
            )
        })

        it('Owner should be the only one allowed to mint tokens', async () => {
            await expect(MyNFT.mint('https://api.example.com/tokens/{id}')).to
                .not.be.reverted
            // simulate a non owner address to mint
            await expect(
                MyNFT.connect(addr1).mint('https://api.example.com/tokens/{id}')
            ).to.be.reverted
        })

        it('Treasury address should be updatable by the owner', async () => {
            // default treasuryAddress
            expect(await MyNFT.treasuryAddress()).to.be.equal(owner.address)
            // update treasury address
            await MyNFT.updateTreasury(addr1.address)
            expect(await MyNFT.treasuryAddress()).to.be.equal(addr1.address)
            // tokens should be minted to the treasuryAddress
            await MyNFT.mint('https://api.example.com/tokens/{id}')
            expect(await MyNFT.balanceOf(addr1.address, 0)).to.equal(1)
        })
    })
})
